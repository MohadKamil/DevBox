{
    "description" : "packer template for tracking my dev tools and creating azure image, and installing the list",
    "variables" : {
        "subscription_id" : "{{env `AZURE_SUBSCRIPTION_ID` }}"
    },
    "builders" :[{
        "type" : "azure-arm",
        "subscription_id" : "{{user `subscription_id`}}",
        "os_type" : "windows",
        "managed_image_name" : "devbox",
        "managed_image_resource_group_name" : "devbox-resource-group",
        "location" : "eastus",
        "image_publisher" : "MicrosoftWindowsDesktop",
        "image_offer" : "Windows-10",
        "image_sku" : "19h1-pro",
        "communicator": "winrm",
        "winrm_use_ssl": true,
        "winrm_insecure": true,
        "winrm_timeout": "5m",
        "winrm_username": "packer",
        "async_resourcegroup_delete" : true
    }],
    "provisioners": [
        {
            "type" : "powershell",
            "scripts" : [
                "Scripts/InstallChocolatey.ps1",
                "Scripts/InstallVS2019.ps1",
                "Scripts/InstallRider.ps1",
                "Scripts/InstallDotNetCore.ps1",
                "Scripts/InstallGit.ps1",
                "Scripts/InstallInsomnia.ps1",
                "Scripts/InstallLinqPad.ps1",
                "Scripts/InstallLocalDb.ps1"
            ]
        },
        {
            "type": "powershell",
            "inline": [
                " # NOTE: the following *3* lines are only needed if the you have installed the Guest Agent.",
                "  while ((Get-Service RdAgent).Status -ne 'Running') { Start-Sleep -s 5 }",
                "  while ((Get-Service WindowsAzureTelemetryService).Status -ne 'Running') { Start-Sleep -s 5 }",
                "  while ((Get-Service WindowsAzureGuestAgent).Status -ne 'Running') { Start-Sleep -s 5 }",
    
                "& $env:SystemRoot\\System32\\Sysprep\\Sysprep.exe /oobe /generalize /quiet /quit",
                "while($true) { $imageState = Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\State | Select ImageState; if($imageState.ImageState -ne 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { Write-Output $imageState.ImageState; Start-Sleep -s 10  } else { break } }"
            ]
        }
      ]
    }
